from game import Yieldgen, Cuegen, Block

__author__ = 'gabriele'


class Mine(object):

    def __init__(self, depth, mine_type, scan):
        self.blocks = []
        self.depth = depth
        self.mine_type = mine_type
        self.scan= scan

        if mine_type == 'random':
            make_random_mine(self)
        elif mine_type == 'constant':
            make_constant_mine(self)
        elif mine_type == 'linear':
            make_linear_mine(self)
        else:
            print 'Specify mine type'

def make_random_mine(self):
    """
    Generates a Mine with Blocks containing random quantities of gold in a range
    of 1 to 10.

    :return:
    """

    yield_array = Yieldgen.random_yield(self.depth)     # Generate the array of yield values
    cue_array = Cuegen.make_cue(yield_array, self.scan)

    for index in range(len(yield_array)):               # For every value in the array
        b = Block.Block(index, yield_array[index], cue_array[index])   # Make a block with the matching yield and number
        self.blocks.append(b)                           # Add the block to the Mine

    return self

def make_constant_mine(self):
    """
    Generates a Mine with Blocks containing constant quantities of gold

    :return:
    """
    yield_array = Yieldgen.constant_yield(self.depth)
    cue_array = Cuegen.make_cue(yield_array, self.scan)

    for index in range(len(yield_array)):

        b = Block.Block(index, yield_array[index], cue_array[index])
        self.blocks.append(b)

    return self

def make_linear_mine(self):
    """
    Generates a Mine with Blocks containing an amount of gold generated by a linear yield function

    :return:
    """
    yield_array = Yieldgen.linear_yield(self.depth)
    cue_array = Cuegen.make_cue(yield_array, self.scan)
    for index in range(len(yield_array)):
        b = Block.Block(index, yield_array[index], cue_array[index])
        self.blocks.append(b)

    return self