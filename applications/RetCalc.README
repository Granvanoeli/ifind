


Page Retrievability Calculator

ifind.utils application: calculate_page_retrievability.py

- use page_capture.py as a template, takes a url and calls PageRetrievabilityCalculator
- reports the retrievability stats

class: PageRetrievabilityCalculator

	- method: compute_retrievability takes a url, returns a retrievability scores dict/object


Given a url and a search engine, calculate the retrievability scores for that page.

[QUERY GENERATION]
From each page, extract a list of queries.
	- compute or assign a value to each query representing the probability of issuing that query (query_prob)

	- ifind.common class: QueryGeneration
		Abstract class
		- method: extract_queries_from_html, takes a html page, returns a list of queries
		- method: extract_queries_from_text, takes a block of text, returns a list of queries
		-attributes:
			- only consider alphanumeric terms
			- only consider terms longer than x characters
			- only consider terms not on the stop list

	- inherits from ifind.common.QueryGeneration 
		- SingleTermQueryGeneration
		concrete class
			returns a list of all unique terms in the html/text
 
		- BiTermQueryGeneration

		
[RESULT RETRIEVAL]
Issue each query to the search engine
	- check results to see whether/where the page is returned
	- in a list/dict (query_rank), store the query and the rank of the retrieved page - 0 meaning not retrieved.

[CALCULATE RETRIEVABILITY SCORE]
	- Given the list/dict (query_rank), compute the retrievability value for each query, and store that for each query_ret_score, for a selected retrievability score function
	- Calculate the total retrievability for the page, given the query_prob and the query_ret_score


[PRESENT SCORES]
	- rank queries by query_ret_score, and show top n queries
	- rank queries by query_ret_score * query_prob, and show the top n queries
	- show the number of queries issued, and the number of queries that were successful, and the page retrievability


	




